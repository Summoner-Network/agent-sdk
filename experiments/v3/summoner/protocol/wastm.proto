syntax = "proto3";

package wastm;

import "google/protobuf/bytes.proto";

// Core WASTM executor interface.
service WASTMExecutor {
  // Deploy a WASM contract into persistent state.
  rpc Deploy(DeployRequest) returns (DeployResponse);

  // Invoke one or more methods in deployed contracts.
  rpc Invoke(InvokeRequest) returns (InvokeResponse);
}

// Request to deploy a signed WASM contract.
message DeployRequest {
  bytes signer = 1;
  bytes signature = 2;
  bytes wasm_code = 3;
  string contract_name = 4;
  bytes hash = 8;          // Asserted hash of this deploy request
  bytes token_address = 9; // Address of the token asserted for rate limiting
}

message DeployResponse {
  bytes contract_id = 1; // 32-byte identifier
}

// Batched invoke request
message InvokeRequest {
  repeated InvokeRequestInner calls = 1;
}

// Single invocation call within a batch.
message InvokeRequestInner {
  bytes signer = 1;        // Public key or address
  bytes signature = 2;     // Signature over the payload
  bytes contract_id = 3;   // Target contract ID
  string method = 4;       // Exported function name
  bytes input = 5;         // ABI-encoded input
  uint64 gas_limit = 6;    // Optional gas cap
  uint64 nonce = 7;        // Unique per-signer value for replay protection
  bytes hash = 8;          // Asserted hash of this invoke request inner
  bytes token_address = 9; // Address of the token asserted for rate limiting
}

// Response to a batched invocation.
message InvokeResponse {
  repeated InvokeReturn returns = 1;
}

// Individual return value for each inner call.
message InvokeReturn {
  bytes return_value = 1; // 32-byte identifier
}
